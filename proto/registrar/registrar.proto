
syntax = "proto3";

package registrar;

enum Apitype {
status = 0;
grpc = 1;
json = 2;
html = 3;
tcp = 4;
}

message ServiceDescription {
string Name = 1;
string Gurupath=2;
}

// on a given port, we can have multiple apis
message ServiceAddress {
string Host=1;
int32 Port=2;
repeated Apitype ApiType = 3;
}

message ServiceLocation {
ServiceDescription Service=1;
repeated ServiceAddress Address=2;
}

message GetRequest {
ServiceDescription Service=1;
}
message GetResponse {
ServiceDescription Service=1;
ServiceLocation Location=2;
string ServiceID=3;
}
message ShutdownRequest {
string ServiceName=1;
}
message ListResponse {
repeated GetResponse Service = 3;
}
message EmptyResponse{}
message ListRequest{
// optional - if set filter by Name
string Name=1;
}

message DeregisterRequest {
string ServiceID=1;
}

message GetTargetRequest {
// use either gurupath or name - not both
string Gurupath=1;
string Name=2;
Apitype ApiType = 3;
}

message ProcessShutdownRequest {
// optional, if nil use originators ip
string IP=1;
// list all the ports we just shutdown...
repeated int32 Port=2;
}

service Registry {
 rpc DeregisterService(DeregisterRequest) returns (EmptyResponse);
 rpc RegisterService(ServiceLocation) returns (GetResponse);
 rpc GetServiceAddress(GetRequest) returns (GetResponse);
 rpc ListServices(ListRequest) returns (ListResponse);
 rpc ShutdownService(ShutdownRequest) returns (EmptyResponse);
 rpc GetTarget(GetTargetRequest) returns (ListResponse);
 // this is called, by the autodeployer if it detects a shutdown process
 // essentially the ports and ip will be deregistered
 rpc InformProcessShutdown(ProcessShutdownRequest) returns (EmptyResponse);
}
