// Code generated by protoc-gen-go.
// source: proto/registrar.proto
// DO NOT EDIT!

/*
Package registrar is a generated protocol buffer package.

It is generated from these files:
	proto/registrar.proto

It has these top-level messages:
	ServiceDescription
	ServiceAddress
	ServiceLocation
	GetRequest
	GetResponse
	ShutdownRequest
	ListResponse
	EmptyResponse
	ListRequest
	DeregisterRequest
	GetTargetRequest
	ProcessShutdownRequest
*/
package registrar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Apitype int32

const (
	Apitype_status Apitype = 0
	Apitype_grpc   Apitype = 1
	Apitype_json   Apitype = 2
	Apitype_html   Apitype = 3
	Apitype_tcp    Apitype = 4
)

var Apitype_name = map[int32]string{
	0: "status",
	1: "grpc",
	2: "json",
	3: "html",
	4: "tcp",
}
var Apitype_value = map[string]int32{
	"status": 0,
	"grpc":   1,
	"json":   2,
	"html":   3,
	"tcp":    4,
}

func (x Apitype) String() string {
	return proto.EnumName(Apitype_name, int32(x))
}
func (Apitype) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceDescription struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Gurupath string `protobuf:"bytes,2,opt,name=Gurupath,json=gurupath" json:"Gurupath,omitempty"`
}

func (m *ServiceDescription) Reset()                    { *m = ServiceDescription{} }
func (m *ServiceDescription) String() string            { return proto.CompactTextString(m) }
func (*ServiceDescription) ProtoMessage()               {}
func (*ServiceDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceDescription) GetGurupath() string {
	if m != nil {
		return m.Gurupath
	}
	return ""
}

// on a given port, we can have multiple apis
type ServiceAddress struct {
	Host    string    `protobuf:"bytes,1,opt,name=Host,json=host" json:"Host,omitempty"`
	Port    int32     `protobuf:"varint,2,opt,name=Port,json=port" json:"Port,omitempty"`
	ApiType []Apitype `protobuf:"varint,3,rep,packed,name=ApiType,json=apiType,enum=registrar.Apitype" json:"ApiType,omitempty"`
}

func (m *ServiceAddress) Reset()                    { *m = ServiceAddress{} }
func (m *ServiceAddress) String() string            { return proto.CompactTextString(m) }
func (*ServiceAddress) ProtoMessage()               {}
func (*ServiceAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceAddress) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ServiceAddress) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServiceAddress) GetApiType() []Apitype {
	if m != nil {
		return m.ApiType
	}
	return nil
}

type ServiceLocation struct {
	Service *ServiceDescription `protobuf:"bytes,1,opt,name=Service,json=service" json:"Service,omitempty"`
	Address []*ServiceAddress   `protobuf:"bytes,2,rep,name=Address,json=address" json:"Address,omitempty"`
}

func (m *ServiceLocation) Reset()                    { *m = ServiceLocation{} }
func (m *ServiceLocation) String() string            { return proto.CompactTextString(m) }
func (*ServiceLocation) ProtoMessage()               {}
func (*ServiceLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceLocation) GetService() *ServiceDescription {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceLocation) GetAddress() []*ServiceAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

type GetRequest struct {
	Service *ServiceDescription `protobuf:"bytes,1,opt,name=Service,json=service" json:"Service,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRequest) GetService() *ServiceDescription {
	if m != nil {
		return m.Service
	}
	return nil
}

type GetResponse struct {
	Service   *ServiceDescription `protobuf:"bytes,1,opt,name=Service,json=service" json:"Service,omitempty"`
	Location  *ServiceLocation    `protobuf:"bytes,2,opt,name=Location,json=location" json:"Location,omitempty"`
	ServiceID string              `protobuf:"bytes,3,opt,name=ServiceID,json=serviceID" json:"ServiceID,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetResponse) GetService() *ServiceDescription {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *GetResponse) GetLocation() *ServiceLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GetResponse) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

type ShutdownRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName,json=serviceName" json:"ServiceName,omitempty"`
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ShutdownRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type ListResponse struct {
	Service []*GetResponse `protobuf:"bytes,3,rep,name=Service,json=service" json:"Service,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListResponse) GetService() []*GetResponse {
	if m != nil {
		return m.Service
	}
	return nil
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ListRequest struct {
	// optional - if set filter by Name
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeregisterRequest struct {
	ServiceID string `protobuf:"bytes,1,opt,name=ServiceID,json=serviceID" json:"ServiceID,omitempty"`
}

func (m *DeregisterRequest) Reset()                    { *m = DeregisterRequest{} }
func (m *DeregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*DeregisterRequest) ProtoMessage()               {}
func (*DeregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeregisterRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

type GetTargetRequest struct {
	// use either gurupath or name - not both
	Gurupath string  `protobuf:"bytes,1,opt,name=Gurupath,json=gurupath" json:"Gurupath,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	ApiType  Apitype `protobuf:"varint,3,opt,name=ApiType,json=apiType,enum=registrar.Apitype" json:"ApiType,omitempty"`
}

func (m *GetTargetRequest) Reset()                    { *m = GetTargetRequest{} }
func (m *GetTargetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTargetRequest) ProtoMessage()               {}
func (*GetTargetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetTargetRequest) GetGurupath() string {
	if m != nil {
		return m.Gurupath
	}
	return ""
}

func (m *GetTargetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTargetRequest) GetApiType() Apitype {
	if m != nil {
		return m.ApiType
	}
	return Apitype_status
}

type ProcessShutdownRequest struct {
	// optional, if nil use originators ip
	IP string `protobuf:"bytes,1,opt,name=IP,json=iP" json:"IP,omitempty"`
	// list all the ports we just shutdown...
	Port []int32 `protobuf:"varint,2,rep,packed,name=Port,json=port" json:"Port,omitempty"`
}

func (m *ProcessShutdownRequest) Reset()                    { *m = ProcessShutdownRequest{} }
func (m *ProcessShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessShutdownRequest) ProtoMessage()               {}
func (*ProcessShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ProcessShutdownRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ProcessShutdownRequest) GetPort() []int32 {
	if m != nil {
		return m.Port
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceDescription)(nil), "registrar.ServiceDescription")
	proto.RegisterType((*ServiceAddress)(nil), "registrar.ServiceAddress")
	proto.RegisterType((*ServiceLocation)(nil), "registrar.ServiceLocation")
	proto.RegisterType((*GetRequest)(nil), "registrar.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "registrar.GetResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "registrar.ShutdownRequest")
	proto.RegisterType((*ListResponse)(nil), "registrar.ListResponse")
	proto.RegisterType((*EmptyResponse)(nil), "registrar.EmptyResponse")
	proto.RegisterType((*ListRequest)(nil), "registrar.ListRequest")
	proto.RegisterType((*DeregisterRequest)(nil), "registrar.DeregisterRequest")
	proto.RegisterType((*GetTargetRequest)(nil), "registrar.GetTargetRequest")
	proto.RegisterType((*ProcessShutdownRequest)(nil), "registrar.ProcessShutdownRequest")
	proto.RegisterEnum("registrar.Apitype", Apitype_name, Apitype_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	DeregisterService(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RegisterService(ctx context.Context, in *ServiceLocation, opts ...grpc.CallOption) (*GetResponse, error)
	GetServiceAddress(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	ListServices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ShutdownService(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// this is called, by the autodeployer if it detects a shutdown process
	// essentially the ports and ip will be deregistered
	InformProcessShutdown(ctx context.Context, in *ProcessShutdownRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) DeregisterService(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/DeregisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RegisterService(ctx context.Context, in *ServiceLocation, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetServiceAddress(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/GetServiceAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListServices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ShutdownService(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/ShutdownService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetTarget(ctx context.Context, in *GetTargetRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/GetTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) InformProcessShutdown(ctx context.Context, in *ProcessShutdownRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/registrar.Registry/InformProcessShutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	DeregisterService(context.Context, *DeregisterRequest) (*EmptyResponse, error)
	RegisterService(context.Context, *ServiceLocation) (*GetResponse, error)
	GetServiceAddress(context.Context, *GetRequest) (*GetResponse, error)
	ListServices(context.Context, *ListRequest) (*ListResponse, error)
	ShutdownService(context.Context, *ShutdownRequest) (*EmptyResponse, error)
	GetTarget(context.Context, *GetTargetRequest) (*ListResponse, error)
	// this is called, by the autodeployer if it detects a shutdown process
	// essentially the ports and ip will be deregistered
	InformProcessShutdown(context.Context, *ProcessShutdownRequest) (*EmptyResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_DeregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/DeregisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeregisterService(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterService(ctx, req.(*ServiceLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetServiceAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetServiceAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/GetServiceAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetServiceAddress(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListServices(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ShutdownService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ShutdownService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/ShutdownService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ShutdownService(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/GetTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetTarget(ctx, req.(*GetTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_InformProcessShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).InformProcessShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrar.Registry/InformProcessShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).InformProcessShutdown(ctx, req.(*ProcessShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registrar.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeregisterService",
			Handler:    _Registry_DeregisterService_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _Registry_RegisterService_Handler,
		},
		{
			MethodName: "GetServiceAddress",
			Handler:    _Registry_GetServiceAddress_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Registry_ListServices_Handler,
		},
		{
			MethodName: "ShutdownService",
			Handler:    _Registry_ShutdownService_Handler,
		},
		{
			MethodName: "GetTarget",
			Handler:    _Registry_GetTarget_Handler,
		},
		{
			MethodName: "InformProcessShutdown",
			Handler:    _Registry_InformProcessShutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/registrar.proto",
}

func init() { proto.RegisterFile("proto/registrar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0x1f, 0x2c, 0xe9, 0x0d, 0xac, 0x99, 0xa5, 0x8d, 0x10, 0x86, 0xd4, 0xe5, 0x69, 0x42,
	0x68, 0x83, 0x4e, 0x82, 0x97, 0x49, 0x50, 0xd4, 0xa9, 0x4c, 0x4c, 0xa8, 0xca, 0xfa, 0x07, 0x42,
	0xea, 0xa5, 0x41, 0x6d, 0x6c, 0x6c, 0x17, 0xd4, 0x27, 0x9e, 0xf8, 0x17, 0xfc, 0x58, 0x94, 0xc4,
	0x69, 0x9c, 0xb4, 0x1d, 0xd2, 0xde, 0x9c, 0xeb, 0x7b, 0xcf, 0xbd, 0xe7, 0xdc, 0xe3, 0xc0, 0x21,
	0x65, 0x44, 0x90, 0x73, 0x86, 0x93, 0x94, 0x0b, 0x16, 0xb1, 0xb3, 0xe2, 0x1b, 0x75, 0xd6, 0x01,
	0xff, 0x38, 0x21, 0x24, 0x99, 0xe3, 0xf3, 0x88, 0xa6, 0xe7, 0x51, 0x96, 0x11, 0x11, 0x89, 0x94,
	0x64, 0xbc, 0x4c, 0x0c, 0x86, 0x80, 0x6e, 0x31, 0xfb, 0x99, 0xc6, 0x78, 0x88, 0x79, 0xcc, 0x52,
	0x9a, 0x5f, 0x22, 0x04, 0xe6, 0xd7, 0x68, 0x81, 0x3d, 0xad, 0xa7, 0x9d, 0x76, 0x42, 0x33, 0x8b,
	0x16, 0x18, 0xf9, 0x60, 0x8f, 0x96, 0x6c, 0x49, 0x23, 0x31, 0xf3, 0xf4, 0x22, 0x6e, 0x27, 0xf2,
	0x3b, 0xb8, 0x83, 0x7d, 0x89, 0x32, 0x98, 0x4e, 0x19, 0xe6, 0x3c, 0x47, 0xf8, 0x4c, 0xb8, 0xa8,
	0x10, 0x66, 0x84, 0x8b, 0x3c, 0x36, 0x26, 0x4c, 0x14, 0xd5, 0x8f, 0x43, 0x93, 0x12, 0x26, 0xd0,
	0x6b, 0xb0, 0x06, 0x34, 0x9d, 0xac, 0x28, 0xf6, 0x8c, 0x9e, 0x71, 0xba, 0xdf, 0x47, 0x67, 0x35,
	0x97, 0x01, 0x4d, 0xc5, 0x8a, 0xe2, 0xd0, 0x8a, 0xca, 0x94, 0xe0, 0x37, 0x74, 0x65, 0x9f, 0x1b,
	0x12, 0x17, 0x3c, 0xd0, 0x7b, 0xb0, 0x64, 0xa8, 0xe8, 0xe5, 0xf4, 0x5f, 0x2a, 0x00, 0x9b, 0xd4,
	0x42, 0x8b, 0x97, 0x31, 0x74, 0x01, 0x96, 0x1c, 0xd6, 0xd3, 0x7b, 0xc6, 0xa9, 0xd3, 0x7f, 0xbe,
	0x59, 0x28, 0x13, 0x42, 0x2b, 0x2a, 0x0f, 0xc1, 0x15, 0xc0, 0x08, 0x8b, 0x10, 0xff, 0x58, 0x62,
	0x2e, 0x1e, 0xdc, 0x3b, 0xf8, 0xab, 0x81, 0x53, 0xe0, 0x70, 0x4a, 0x32, 0x8e, 0x1f, 0x4e, 0xe2,
	0x1d, 0xd8, 0x95, 0x12, 0x85, 0xac, 0x4e, 0xdf, 0xdf, 0xac, 0xac, 0x32, 0x42, 0x7b, 0x5e, 0xa9,
	0x76, 0x0c, 0x1d, 0x79, 0x79, 0x3d, 0xf4, 0x8c, 0x62, 0x47, 0x1d, 0x5e, 0x05, 0x82, 0x0b, 0xe8,
	0xde, 0xce, 0x96, 0x62, 0x4a, 0x7e, 0x65, 0x15, 0xd5, 0x1e, 0x38, 0xb2, 0x40, 0x31, 0x86, 0xc3,
	0xeb, 0x50, 0xf0, 0x11, 0x9e, 0xdc, 0xa4, 0xbc, 0xe6, 0xf4, 0xa6, 0xe6, 0x64, 0x14, 0xfa, 0x1e,
	0x29, 0x93, 0x29, 0xe4, 0x6b, 0x55, 0xba, 0xf0, 0xf4, 0x6a, 0x41, 0xc5, 0xaa, 0xba, 0x09, 0x4e,
	0xc0, 0x29, 0x21, 0xcb, 0x19, 0xb6, 0xb8, 0x32, 0x78, 0x0b, 0x07, 0x43, 0x5c, 0xe2, 0x62, 0x56,
	0x25, 0x36, 0xd8, 0x69, 0x6d, 0x76, 0x14, 0xdc, 0x11, 0x16, 0x93, 0x88, 0x25, 0xf5, 0x26, 0x55,
	0x73, 0x6b, 0x4d, 0x73, 0xaf, 0xdb, 0xea, 0xca, 0x63, 0x68, 0xd8, 0x56, 0xfb, 0x9f, 0x6d, 0x2f,
	0xe1, 0x68, 0xcc, 0x48, 0x8c, 0x39, 0x6f, 0xcb, 0xba, 0x0f, 0xfa, 0xf5, 0x58, 0x76, 0xd4, 0xd3,
	0xb1, 0xf2, 0x44, 0x8c, 0xea, 0x89, 0xbc, 0xba, 0x2c, 0x7a, 0xe5, 0x88, 0x08, 0x60, 0x8f, 0x8b,
	0x48, 0x2c, 0xb9, 0xfb, 0x08, 0xd9, 0x60, 0x26, 0x8c, 0xc6, 0xae, 0x96, 0x9f, 0xbe, 0x73, 0x92,
	0xb9, 0x7a, 0x7e, 0x9a, 0x89, 0xc5, 0xdc, 0x35, 0x90, 0x05, 0x86, 0x88, 0xa9, 0x6b, 0xf6, 0xff,
	0x98, 0x60, 0x87, 0xe5, 0x68, 0x2b, 0xf4, 0x45, 0x55, 0x4b, 0x4a, 0x84, 0x8e, 0x95, 0xd1, 0x37,
	0xb4, 0xf4, 0x3d, 0xe5, 0xb6, 0xb1, 0x1d, 0x74, 0x05, 0xdd, 0xb0, 0x05, 0x75, 0x8f, 0xf9, 0xfc,
	0x1d, 0xeb, 0x47, 0x9f, 0xe0, 0x60, 0x84, 0x45, 0xeb, 0xf7, 0x71, 0xd8, 0x4e, 0x2e, 0x87, 0xd9,
	0x85, 0xf1, 0xa1, 0xf4, 0x9e, 0x04, 0xe1, 0x48, 0xcd, 0x53, 0x1c, 0xe4, 0x3f, 0xdb, 0x88, 0x4b,
	0x80, 0x51, 0xed, 0xf8, 0xad, 0x5c, 0x9a, 0x6b, 0xbb, 0x47, 0x94, 0x01, 0x74, 0xd6, 0xe6, 0x42,
	0x2f, 0x9a, 0xe3, 0x36, 0x2c, 0xb7, 0x7b, 0x96, 0x09, 0x1c, 0x5e, 0x67, 0x77, 0x84, 0x2d, 0x5a,
	0x9e, 0x41, 0x27, 0x4a, 0xc5, 0x76, 0x3f, 0xed, 0x1e, 0xec, 0xdb, 0x5e, 0xf1, 0xbf, 0xbf, 0xf8,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xf7, 0x9b, 0x46, 0x31, 0x06, 0x00, 0x00,
}
